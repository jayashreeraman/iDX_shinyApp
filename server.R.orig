source("mapping.R")
source("pricing.R")
source("global.R")
shinyServer(function(input,output,session){
  colnames(machine_data) <- c("UID","Year_Installed","City","State","zip","Purchase_Price","Number_of_services",
                              "Company","Type","Model","Coil_Thickness","Patient_Weight_Limit","MD5.Hash")
  
  output$machine_name <- renderUI({
    filter.name.bycompany <- filter(metaTable,Company==input$company)
    filter.name <- filter(filter.name.bycompany,Type==input$machine_type)
    selectInput("name","Name of Machine",choices= unique(filter.name$Model),selected = value1)
  })
  
  
  output$mytable <- renderDataTable(
<<<<<<< HEAD
    showTable <- select(metaTable,UID,Company,Type,Model,Year_Installed,Purchase_Price,Patient_Weight_Limit )
    # options = list(pageLength = 5),
=======
    select(metaTable, UID, Company, Type, Model, Purchase_Price)
    )
    # pageLength = 5),
>>>>>>> aefd44c18885a7b397532b0aa3653f76796708cd
    # callback = "function(table) {
    # table.on('click.dt', 'tr', function() {
    # $(this).toggleClass('selected');
    # Shiny.onInputChange('rows',
    # table.rows('.selected').indexes().toArray());
    # });}"
  
  observeEvent(input$edit, {
    show("purchase_price")
    show("service")
    show("city")
    show("state")
    show("pwl")
    show("thickness")
    show("submit")
    show("price")
  })
  
  
  output$machineCount <- renderValueBox({
    valueBox(length(unique(metaTable$Model)), "Total Assets", icon = icon("list"), color = "blue")
  })
  output$totalValue <- renderValueBox({
    valueBox(paste0("$",format(sum(metaTable$Purchase_Price), big.mark = ",")),"Total Value of Assets",icon = icon("dollar"),color = "yellow")
  })
  
  output$averageValue <- renderValueBox({
    valueBox(paste0("$",format(floor(sum(metaTable$Purchase_Price)/length(metaTable$Model)), big.mark = ",")),"Average Value of Assets",icon = icon("dollar"),color = "green")
  })
  
  output$oemplot <- renderPlot({test_a
  })
  
  
  output$track_asset_plot <- renderPlotly({
    tracking_asset(input$select_asset)
  })
  
  output$allAsset <- renderPlotly({
    allMachines()
  })
  output$track_asset_table <- renderDataTable({
    asset_history_table <- filter(metaTable,metaTable$Model==input$select_asset) %>% select(UID,Company,Type,Model,Purchase_Price)
    datatable(asset_history_table,options = list(dom = 't'))
  })
  
  dataReactive <- reactive({
    data.frame(Company = c(input$company), Type = c(input$machine_type), Name = c(input$name), Purchase_Price = c(input$purchase_price),
               Number_of_services = c(input$service),City = c(input$city),State = c(input$state),Patient_Weight_Limit = c(input$pwl),
               Coil_Thickness = c(input$thickness))
  })
  observeEvent(input$price, {
    tableReactive()
    plotReactive()
    #price.plot(input$company,input$name)
    #print(pricing.for.average(input$company,input$name))
    # metaTable <- rbind(machine_data,dataReactive())
    # write.csv(metaTable,"mockdata.csv",row.names = F,na = "")
    # js$reset()
  })
  
  plotReactive <- reactive({
    output$price_plot <- renderPlotly(price.plot(input$company,input$name))
  })
  
  tableReactive <- reactive({
    output$priceTable <- renderDataTable({
      Standard = c("Retail Price","Average Price","Buyback Price")
      Value = c(paste("$",format(round(pricing.for.retail(input$company,input$name)), big.mark = ",")),paste("$",format(round(pricing.for.average(input$company,input$name)), big.mark = ",")),
                paste("$",format(round(pricing.for.buyback(input$company,input$name)), big.mark = ",")))
      df1 = data.frame(Standard,Value)
      colnames(df1) <- c("Price Standard", "Dollar Value")
      datatable(df1,options = list(dom = 't'))
    })
  })
  
})