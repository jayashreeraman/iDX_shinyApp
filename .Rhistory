predict(lm(dist~speed,data = data.1))
data.1 <- cars
data.1 <- cars
View(data.1)
fit <- lm(dist~speed,data = data.1)
plot(data.1$speed,data.1$dist,col = 'blue')
abline(fit)
summary(fit)
confint(fit,level = 0.95)
plot(fit)
test_stats <- abs(summary(fit)$coefficients[2,1]-5)/summary(fit)$coefficients[2,2]
p_value <- (1-pnorm(test_stats))*2
data.1$speed <- 21
predict(lm(dist~speed,data = data.1))
data.2 <- iris
attach(data.2)
fit.1 <- lm(Petal.Width ~ Petal.Length + Sepal.Width + Sepal.Length)
plot(fit)
summary(fit)
unique(fit$residuals)
data.1[which(fit$residuals > 40),]
data.1[-which(fit$residuals > 40),]
data.1.res <- data.1[-which(fit$residuals > 40),]
summary(data.1.res)
fit.res <- lm(data.1.res)
summary(fit.res)
fit.res <- lm(dist~speed,data = data.1.res)
summary(fit.res)
data.1.res <- data.1[-which(fit$residuals > 40),]
fit.res <- lm(dist~speed,data = data.1.res)
summary(fit.res)
plot(fit.res)
which(fit$residuals > 40)
data.1[-which(fit$residuals > 40),]
data.1 <- cars
fit <- lm(dist~speed,data = data.1)
plot(data.1$speed,data.1$dist,col = 'blue')
abline(fit)
summary(fit)
confint(fit,level = 0.95)
plot(fit)
test_stats <- abs(summary(fit)$coefficients[2,1]-5)/summary(fit)$coefficients[2,2]
p_value <- (1-pnorm(test_stats))*2
data.1.res <- data.1[-which(fit$residuals > 40),]
p_value
data.1.res <- data.1[-which(fit$residuals > 40),]
fit.res <- lm(dist~speed,data = data.1.res)
summary(fit.res)
data.1$speed <- 21
predict(lm(dist~speed,data = data.1))
data.2 <- iris
attach(data.2)
fit.1 <- lm(Petal.Width ~ Petal.Length + Sepal.Width + Sepal.Length)
fit.1 <- lm(Petal.Width ~ Petal.Length + Sepal.Width + Sepal.Length,subset = Species != "virginica")
summary(fit.1)
confint(fit,level = 0.90)
confint(fit.1,level = 0.90)
fit.1.noX3 <- fit.1 <- lm(Petal.Width ~ Petal.Length + Sepal.Width + Sepal.Length,subset = Species != "virginica")
summary(fit.1.noX3)
fit.1.noX3 <- fit.1 <- lm(Petal.Width ~ Petal.Length + Sepal.Width,subset = Species != "virginica")
summary(fit.1.noX3)
confint(fit.1.noX3,level = 0.90)
data.3 <- iris
data.3 <- iris[which(Species = "versicolor" & Species = "virginica"),]
data.3 <- iris[which(Species == "versicolor" & Species == "virginica"),]
which(Species == "versicolor")
which(Species == "virginica")
data.3 <- iris[51:150,]
View(data.2)
attach(data.3)
plot(Sepal.Length,Sepal.Width)
plot(Sepal.Length,Sepal.Width,col = ifelse(Species = 'versicolor','red','blue'))
plot(Sepal.Length,Sepal.Width,col = ifelse(Species == 'versicolor','red','blue'))
data.3 <- iris[which(Species == "versicolor" & Species == "virginica"),]
data.3 <- iris[which(Species == "versicolor" | Species == "virginica"),]
attach(data.3)
plot(Sepal.Length,Sepal.Width,col = ifelse(Species == 'versicolor','red','blue'))
data.3 <- iris[which(Species == "versicolor" | Species == "virginica"),]
data.3 <- iris[which(Species == "versicolor"),]
data.3 <- iris[51:150,]
plot(data.3$Sepal.Length,data.3$Sepal.Width,col = ifelse(Species == 'versicolor','red','blue'))
plot(data.3$Sepal.Length,data.3$Sepal.Width,col = ifelse(Species == 'versicolor','red','blue'),pch = 20)
boxplot(data.3$Sepal.Length,col = ifelse(Species == 'versicolor','red','blue'))
boxplot(Sepal.Length ~ Species,data = data.3,col = ifelse(Species == 'versicolor','red','blue'))
data.3 <- iris[51:150,]
plot(data.3$Sepal.Length,data.3$Sepal.Width,col = ifelse(Species == 'versicolor','red','blue'),pch = 20)
boxplot(Sepal.Length ~ Species,data = data.3,col = ifelse(Species == 'versicolor','red','blue'))
data.3 <- iris[51:150,]
View(data.3)
boxplot(Sepal.Length ~ Species,data = data.3,col = ifelse(Species == 'versicolor','red','blue'))
data.3 <- iris[which(Species == "versicolor" | Species == "virginica"),]
View(data.3)
View(data.3)
data.3 <- iris[which(Species == "virginica" | Species == "versicolor"),]
View(data.3)
View(data.3)
View(data.3)
data.3 <- iris[which(Species == "virginica" & Species == "versicolor"),]
data.3 <- iris[which(Species == "virginica"),]
fit.1 <- lm(Petal.Width ~ Petal.Length + Sepal.Width + Sepal.Length,data = data.2,subset = Species != "virginica")
summary(fit.1)
data.1 <- cars
fit <- lm(dist~speed,data = data.1)
plot(data.1$speed,data.1$dist,col = 'blue')
abline(fit)
summary(fit)
# Intercept: -17.5791
# Slope: 3.9324
# Hence significantly different from 0 when sf is 0.01. The Pr(>|t|) is 0.0123 indicating
# that is different from zero
confint(fit,level = 0.95)
#                  2.5 %    97.5 %
# (Intercept) -31.167850 -3.990340
# speed         3.096964  4.767853
# alpha and beta are intercept and slope respectivetly
# Intercept: -17.5791
# Slope: 3.9324
plot(fit)
p_value <- (1-pnorm(test_stats))*2
# 0.01018941
# At the 5% significance level we have good (not strong) evidence to reject the null hypothesis
# since the pvalue is less than 5%
data.1.res <- data.1[-which(fit$residuals > 40),]
fit.res <- lm(dist~speed,data = data.1.res)
summary(fit.res)
# Intercept: -15.5336
# Slope: 3.6812
# Hence significantly different from 0 when sf is 0.01. The Pr(>|t|) is 0.00905 indicating
# that is different from zero
data.1$speed <- 21
predict(lm(dist~speed,data = data.1))
# 42.98
data.2 <- iris
data.2 <- iris
fit.1 <- lm(Petal.Width ~ Petal.Length + Sepal.Width + Sepal.Length,data = data.2,subset = Species != "virginica")
summary(fit.1)
confint(fit.1,level = 0.90)
fit.1.noX3 <- fit.1 <- lm(Petal.Width ~ Petal.Length + Sepal.Width,subset = Species != "virginica")
detach(iris)
detach()
data.1 <- cars
fit <- lm(dist~speed,data = data.1)
plot(data.1$speed,data.1$dist,col = 'blue')
abline(fit)
summary(fit)
# Intercept: -17.5791
# Slope: 3.9324
# Hence significantly different from 0 when sf is 0.01. The Pr(>|t|) is 0.0123 indicating
# that is different from zero
confint(fit,level = 0.95)
#                  2.5 %    97.5 %
# (Intercept) -31.167850 -3.990340
# speed         3.096964  4.767853
# alpha and beta are intercept and slope respectivetly
# Intercept: -17.5791
# Slope: 3.9324
plot(fit)
p_value <- (1-pnorm(test_stats))*2
# 0.01018941
# At the 5% significance level we have good (not strong) evidence to reject the null hypothesis
# since the pvalue is less than 5%
data.1.res <- data.1[-which(fit$residuals > 40),]
fit.res <- lm(dist~speed,data = data.1.res)
summary(fit.res)
# Intercept: -15.5336
# Slope: 3.6812
# Hence significantly different from 0 when sf is 0.01. The Pr(>|t|) is 0.00905 indicating
# that is different from zero
data.1$speed <- 21
predict(lm(dist~speed,data = data.1))
# 42.98
data.2 <- iris
data.2 <- iris
fit.1 <- lm(Petal.Width ~ Petal.Length + Sepal.Width + Sepal.Length,data = data.2,subset = Species != "virginica")
summary(fit.1)
confint(fit.1,level = 0.90)
fit.1.noX3 <- lm(Petal.Width ~ Petal.Length + Sepal.Width,,subset = Species != "virginica")
summary(fit.1.noX3)
fit.1.noX3 <- lm(Petal.Width ~ Petal.Length + Sepal.Width,data = data.2,subset = Species != "virginica")
summary(fit.1.noX3)
confint(fit.1.noX3,level = 0.90)
data.3 <- iris[which(Species == "virginica" | Species == "versicolor"),]
View(data.3)
data.1 <- cars
fit <- lm(dist~speed,data = data.1)
plot(data.1$speed,data.1$dist,col = 'blue')
abline(fit)
summary(fit)
# Intercept: -17.5791
# Slope: 3.9324
# Hence significantly different from 0 when sf is 0.01. The Pr(>|t|) is 0.0123 indicating
# that is different from zero
confint(fit,level = 0.95)
#                  2.5 %    97.5 %
# (Intercept) -31.167850 -3.990340
# speed         3.096964  4.767853
# alpha and beta are intercept and slope respectivetly
# Intercept: -17.5791
# Slope: 3.9324
plot(fit)
p_value <- (1-pnorm(test_stats))*2
# 0.01018941
# At the 5% significance level we have good (not strong) evidence to reject the null hypothesis
# since the pvalue is less than 5%
data.1.res <- data.1[-which(fit$residuals > 40),]
fit.res <- lm(dist~speed,data = data.1.res)
summary(fit.res)
# Intercept: -15.5336
# Slope: 3.6812
# Hence significantly different from 0 when sf is 0.01. The Pr(>|t|) is 0.00905 indicating
# that is different from zero
data.1$speed <- 21
predict(lm(dist~speed,data = data.1))
# 42.98
data.2 <- iris
fit.1 <- lm(Petal.Width ~ Petal.Length + Sepal.Width + Sepal.Length,data = data.2,subset = Species != "virginica")
summary(fit.1)
# Petal.Length  0.41788
# Sepal.Width   0.07191
# Sepal.Length -0.06046
# Intercept    -0.30166
confint(fit.1,level = 0.90)
#                     5 %         95 %
# (Intercept)  -0.538018274 -0.065303301
# Petal.Length  0.383090546  0.452664746
# Sepal.Width   0.009160263  0.134669257
# Sepal.Length -0.124536384  0.003625765
fit.1.noX3 <- lm(Petal.Width ~ Petal.Length + Sepal.Width,data = data.2,subset = Species != "virginica")
summary(fit.1.noX3)
# Petal.Length  0.388948
# Sepal.Width   0.035812
# Intercept    -0.437761
confint(fit.1.noX3,level = 0.90)
#                     5 %        95 %
# (Intercept)  -0.62636593 -0.24915527
# Petal.Length  0.37240073  0.40549524
# Sepal.Width  -0.01429088  0.08591425
install.packages("data.tree")
shiny::runApp('Desktop/shiny-app-idx')
runApp('Desktop/shiny-app-idx')
length(machine_data$Name)
runApp('Desktop/shiny-app-idx')
runApp('Desktop/shiny-app-idx')
runApp('Desktop/shiny-app-idx')
runApp('Desktop/shiny-app-idx')
runApp('Desktop/shiny-app-idx')
runApp('Desktop/shiny-app-idx')
runApp('Desktop/shiny-app-idx')
runApp('Desktop/shiny-app-idx')
runApp('Desktop/shiny-app-idx')
install.packages("dashboardthemes")
library(devtools)
install_github("nik01010/dashboardthemes")
runApp('Desktop/shiny-app-idx')
library(shinyDashboardThemes)
install_github("nik01010/dashboardthemes")
runApp('Desktop/shiny-app-idx')
runApp('Desktop/shiny-app-idx')
runApp('Desktop/shiny-app-idx')
runApp('Desktop/shiny-app-idx')
runApp('Desktop/shiny-app-idx')
runApp('Desktop/shiny-app-idx')
length(machine_data$Name)
runApp('Desktop/shiny-app-idx')
runApp('Desktop/shiny-app-idx')
length(machine_data$Purchase_Price)
sum(machine_data$Purchase_Price)
runApp('Desktop/shiny-app-idx')
runApp('Desktop/shiny-app-idx')
runApp('Desktop/shiny-app-idx')
View(machine_data)
sum(machine_data$Purchase_Price))/length(machine_data$Name)
sum(machine_data$Purchase_Price)/length(machine_data$Name)
floor(sum(machine_data$Purchase_Price)/length(machine_data$Name))
runApp('Desktop/shiny-app-idx')
library(plotly)
table(machine_data$Company)
runApp('Desktop/shiny-app-idx')
x <- table(machine_data$Company)
x
xyza <- table(machine_data$Company)
barplot(z)
barplot(x)
runApp('Desktop/shiny-app-idx')
runApp('Desktop/shiny-app-idx')
runApp('Desktop/shiny-app-idx')
runApp('Desktop/shiny-app-idx')
runApp('Desktop/shiny-app-idx')
runApp('Desktop/shiny-app-idx')
runApp('Desktop/shiny-app-idx')
runApp('Desktop/shiny-app-idx')
runApp('Desktop/shiny-app-idx')
runApp('Desktop/shiny-app-idx')
runApp('Desktop/shiny-app-idx')
runApp('Desktop/shiny-app-idx')
library(shinyjs)
runApp('Desktop/shiny-app-idx')
runApp('Desktop/shiny-app-idx')
colnames(machine_data)
runApp('Desktop/shiny-app-idx')
runApp('Desktop/shiny-app-idx')
runApp('Desktop/shiny-app-idx')
runApp('Desktop/shiny-app-idx')
runApp('Desktop/shiny-app-idx')
runApp('Desktop/shiny-app-idx')
runApp('Desktop/shiny-app-idx')
runApp('Desktop/shiny-app-idx')
runApp('Desktop/shiny-app-idx')
runApp('Desktop/shiny-app-idx')
runApp('Desktop/shiny-app-idx')
View(machine_data)
machine_data["Purchase_Price",]
machine_data[,"Purchase_Price"]
machine_data["Signa EXCITE 3.0T","Purchase_Price"]
machine_data[which(machine_data$Name==Signa EXCITE 3.0T),"Purchase_Price"]
machine_data[which(machine_data$Name=="Signa EXCITE 3.0T"),"Purchase_Price"]
runApp('Desktop/shiny-app-idx')
runApp('Desktop/shiny-app-idx')
runApp('Desktop/shiny-app-idx')
runApp('Desktop/shiny-app-idx')
runApp('Desktop/shiny-app-idx')
runApp('Desktop/shiny-app-idx')
runApp('Desktop/shiny-app-idx')
runApp('Desktop/shiny-app-idx')
runApp('Desktop/shiny-app-idx')
runApp('Desktop/shiny-app-idx')
runApp('Desktop/shiny-app-idx')
runApp('Desktop/shiny-app-idx')
runApp('Desktop/shiny-app-idx')
runApp('Desktop/shiny-app-idx')
runApp('Desktop/shiny-app-idx')
runApp('Desktop/shiny-app-idx')
runApp('Desktop/shiny-app-idx')
runApp('Desktop/shiny-app-idx')
runApp('Desktop/shiny-app-idx')
runApp('Desktop/shiny-app-idx')
View(machine_data)
runApp('Desktop/shiny-app-idx')
runApp('Desktop/shiny-app-idx')
runApp('Desktop/shiny-app-idx')
runApp('Desktop/shiny-app-idx')
machine_data
runApp('Desktop/shiny-app-idx')
View(metaTable)
runApp('Desktop/shiny-app-idx')
runApp('Desktop/shiny-app-idx')
install.packages("shinyBS")
runApp('Desktop/shiny-app-idx')
version
version
install.packages("installr")
version
install.packages("installr")
install.packages("radiant")
library(radiant)
radiant.basics_window()
setwd("~/Desktop/shiny-atp")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
tracking_asset <- function(filterName){
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray95"),
subunitcolor = toRGB("gray85"),
countrycolor = toRGB("gray85"),
countrywidth = 0.5,
subunitwidth = 0.5
)
blah <- filter(new,new$Model==filterName)
p <- plot_geo(blah, lat = ~latitude, lon = ~longitude) %>%
add_markers(
text = ~paste(Company,paste(Type,"-",Model),City,State,sep = "<br />")
) %>%
layout(
title = ~paste("Location of ",filterName),
geo = g
)
return(p)
}
tracking_asset("Signa EXCITE 3.0T")
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("digest")
install.packages("digest")
library(digest)
txt <-  "Asset1"
hash <- digest(txt, algo="md5",serialize = F)
hash
View(machine_data)
xyz <- read.csv("mockdata.csv")
xyz$MD5.Hash.Values <- NULL
xyz
View(xyz)
xyz$UID[1,]
xyz$UID[1]
xyz$UID[2]
for(i in 1:nrow(xyz)){
text <- xyz$UID[i]
hash <- digest(txt, algo="md5",serialize = F)
xyz$MD5.Hash <- hash[i]
}
View(xyz)
for(i in 1:nrow(xyz)){
text <- xyz$UID[i]
hash[i] <- digest(txt, algo="md5",serialize = F)
xyz$MD5.Hash <- hash[i]
}
for(i in 1:nrow(xyz)){
text <- xyz$UID[i]
hash <- digest(txt, algo="md5",serialize = F)
xyz$MD5.Hash[i] <- hash
}
for(i in 1:nrow(xyz)){
text <- xyz$UID[i]
hash <- digest(text, algo="md5",serialize = F)
xyz$MD5.Hash[i] <- hash
}
text <- xyz$UID[2]
hash <- digest(text, algo="md5",serialize = F)
xyz <- read.csv("mockdata.csv",stringsAsFactors = F)
xyz$MD5.Hash.Values <- NULL
for(i in 1:nrow(xyz)){
text <- as.characxyz$UID[2]
hash <- digest(text, algo="md5",serialize = F)
xyz$MD5.Hash[2] <- hash
}
for(i in 1:nrow(xyz)){
text <- xyz$UID[2]
hash <- digest(text, algo="md5",serialize = F)
xyz$MD5.Hash[2] <- hash
}
xyz <- read.csv("mockdata.csv",stringsAsFactors = F)
xyz$MD5.Hash.Values <- NULL
for(i in 1:nrow(xyz)){
text <- xyz$UID[i]
hash <- digest(text, algo="md5",serialize = F)
xyz$MD5.Hash[i] <- hash
}
runApp()
runApp()
write.csv(xyz,"mockdata.csv")
runApp()
View(machine_data)
pricing_info <- read.csv("pricing.r",stringsAsFactors = F)
pricing_info <- read.csv("MySQL_CleanData180509_002.csv",stringsAsFactors = F)
View(pricing_info)
which(pricing_info$Model=="Magnetom Espree 1.5T")
which(pricing_info$Model=="Espree 1.5T")
which(grepl(pricing_info$Model,"Espree"))
which(grepl(pricing_info$Model,"Symphony"))
grepl(pricing_info$Model,"Symphony")
grepl(pricing_info$Model,"covery")
class(pricing_info$Model)
grepl("covery",pricing_info$Model)
which(grepl("Espree",pricing_info$Model))
grepl("Espree",pricing_info$Model)
unique(grepl("Espree",pricing_info$Model))
unique(grepl("Symphony",pricing_info$Model))
which(grepl("Symphony",pricing_info$Model))
which(grepl("Signa EXCITE 3.0T",pricing_info$Model))
which(grepl("EXCITE 3.0T",pricing_info$Model))
which(grepl("EXCITE",pricing_info$Model))
which(grepl("LightSpeed 16",pricing_info$Model))
which(grepl("Lightspeed 16",pricing_info$Model))
average?
?average
pricing_info$PriceConvertedUSD[,2]
pricing_info$PriceConvertedUSD[2]
pricing_info$PriceConvertedUSD[2000]
pricing_info$PriceConvertedUSD[which(grepl("Lightspeed 16",pricing_info$Model))]
mean(as.numeric(pricing_info$PriceConvertedUSD[which(grepl("Lightspeed 16",pricing_info$Model))]))
mean(pricing_info$PriceConvertedUSD[which(grepl("Lightspeed 16",pricing_info$Model))])
pricing_info$PriceConvertedUSD[which(grepl("Lightspeed 16",pricing_info$Model))]
na.omit(pricing_info$PriceConvertedUSD[which(grepl("Lightspeed 16",pricing_info$Model))])
as.numeric(pricing_info$PriceConvertedUSD[which(grepl("Lightspeed 16",pricing_info$Model))])
na.omit(as.numeric(pricing_info$PriceConvertedUSD[which(grepl("Lightspeed 16",pricing_info$Model))]))
mean(na.omit(as.numeric(pricing_info$PriceConvertedUSD[which(grepl("Lightspeed 16",pricing_info$Model))])))
mean(na.omit(as.numeric(pricing_info$PriceConvertedUSD[which(grepl("Lightspeed 16",pricing_info$Model))])))
mean(na.omit(as.numeric(pricing_info$PriceConvertedUSD[which(grepl("Lightspeed Plus",pricing_info$Model))])))
shiny::runApp()
runApp()
View(metaTable)
runApp()
colnames(metaTable)
runApp()
View(machine_data)
runApp()
runApp()
runApp()
runApp()
sum(metaTable$Average_Price)
metaTable$Average_Price
sum(metaTable$Average_Price)
runApp()
runApp()
runApp()
runApp()
